Elm.Repl = Elm.Repl || {};
Elm.Repl.make = function (_elm) {
   "use strict";
   _elm.Repl = _elm.Repl || {};
   if (_elm.Repl.values)
   return _elm.Repl.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Repl",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var tsol = {ctor: "_Tuple0"};
   var triple = function (number) {
      return number * 3;
   };
   var names = _L.fromArray(["larry"
                            ,"moe"
                            ,"curly"]);
   var multiply = F2(function (x,
   y) {
      return x * y;
   });
   var entry = {_: {}
               ,id: 1
               ,phrase: "Future-Proof"
               ,points: 100
               ,wasSpoken: false};
   var entry2 = _U.replace([["points"
                            ,500]],
   entry);
   var deltron3030 = A2($List.map,
   $String.length,
   names);
   var clonedEntry = _U.replace([["points"
                                 ,200]
                                ,["wasSpoken",true]],
   entry);
   _elm.Repl.values = {_op: _op
                      ,clonedEntry: clonedEntry
                      ,deltron3030: deltron3030
                      ,entry: entry
                      ,entry2: entry2
                      ,multiply: multiply
                      ,names: names
                      ,triple: triple
                      ,tsol: tsol};
   return _elm.Repl.values;
};