Elm.Repl = Elm.Repl || {};
Elm.Repl.make = function (_elm) {
   "use strict";
   _elm.Repl = _elm.Repl || {};
   if (_elm.Repl.values)
   return _elm.Repl.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Repl",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var tsol = {ctor: "_Tuple0"};
   var numbers = _L.range(-2,3);
   var multiply = F2(function (x,
   y) {
      return x * y;
   });
   var triple = multiply(2);
   var multiplt = F2(function (x,
   y) {
      return x * y;
   });
   var multiple = F2(function (x,
   y) {
      return x * y;
   });
   var isNegative = function (n) {
      return _U.cmp(n,0) < 0;
   };
   var add = F2(function (x,y) {
      return A2($Debug.log,
      "Adding ",
      x + y);
   });
   var deltron3030 = A2(add,3,4);
   _elm.Repl.values = {_op: _op
                      ,add: add
                      ,deltron3030: deltron3030
                      ,isNegative: isNegative
                      ,multiple: multiple
                      ,multiplt: multiplt
                      ,multiply: multiply
                      ,numbers: numbers
                      ,triple: triple
                      ,tsol: tsol};
   return _elm.Repl.values;
};